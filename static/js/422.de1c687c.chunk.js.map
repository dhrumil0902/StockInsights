{"version":3,"file":"static/js/422.de1c687c.chunk.js","mappings":"8JAIA,MA6HA,EApGsBA,IAAiB,IAAhB,OAAEC,GAAQD,EAC/B,MAAOE,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,OAC5BK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,OAwC7C,OAtCAO,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAqBC,UACzBP,GAAW,GACXE,EAAS,MAET,MAAMM,OAhCWD,WACrB,MAAME,EAAcC,KAAK,yDAEzB,IAWE,aAVuBC,EAAAA,EAAMC,KAC3B,6CACA,gCACA,CACEC,QAAS,CACPC,cAAe,SAASL,IACxB,eAAgB,wCAINM,KAAKC,YACvB,CAAE,MAAOf,GAEP,OADAgB,QAAQhB,MAAM,+BAAgCA,GACvC,IACT,GAc8BiB,GAE1B,IAAKV,EAGH,OAFAN,EAAS,oCACTF,GAAW,GAIb,IACE,MAAMmB,QAAiBR,EAAAA,EAAMS,IAC3B,mDAAmDzB,UAAeQ,YAClE,CACEU,QAAS,CACPC,cAAe,UAAUN,IACzB,aAAc,qBAKpBX,EAAWsB,EAASJ,KAAKA,KAAKM,SAChC,CAAE,MAAOpB,GACPC,EAAS,kCACTe,QAAQhB,MAAM,iCAAkCA,EAClD,CAEAD,GAAW,EAAM,EAGfL,GACFW,GACF,GACC,CAACX,EAAQQ,KAGVmB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BF,SAAA,EACvCC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UACEE,MAAOrB,EACPsB,SAAWC,GAAMtB,EAAcsB,EAAEC,OAAOH,OACxCD,UAAU,uBAAuBF,SAAA,EAEjCO,EAAAA,EAAAA,KAAA,UAAQJ,MAAM,MAAKH,SAAC,SACpBO,EAAAA,EAAAA,KAAA,UAAQJ,MAAM,MAAKH,SAAC,kBACpBO,EAAAA,EAAAA,KAAA,UAAQJ,MAAM,MAAKH,SAAC,mBACb,QACmC,8BAChB1B,KAG7BI,IAAW6B,EAAAA,EAAAA,KAAA,KAAAP,SAAG,uBACdpB,IAAS2B,EAAAA,EAAAA,KAAA,KAAAP,SAAIpB,KACd2B,EAAAA,EAAAA,KAAA,MAAAP,SACGzB,EAAQiC,OAAS,EAChBjC,EAAQkC,KAAKC,IACXH,EAAAA,EAAAA,KAAA,KACEI,KAAM,qBAAqBD,EAAOhB,KAAKkB,YACvCN,OAAO,SACPO,IAAI,aAEJC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,WAAahB,UAErDC,EAAAA,EAAAA,MAAA,MACEa,MAAO,CACLG,OAAQ,UACRC,QAAS,OACTC,aAAc,OACdC,OAAQ,iBACRC,aAAc,MACdC,gBAAiB,UACjBC,WAAY,yBAEdC,aAAenB,GAAOA,EAAEoB,cAAcX,MAAMQ,gBAAkB,UAC9DI,aAAerB,GAAOA,EAAEoB,cAAcX,MAAMQ,gBAAkB,UAAWtB,SAAA,EAEzEO,EAAAA,EAAAA,KAAA,UAAAP,SAASU,EAAOhB,KAAKiC,SACrB1B,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,YACSU,EAAOhB,KAAKkC,IAAI,gBAAclB,EAAOhB,KAAKmC,oBAlBnDnB,EAAOhB,KAAKoC,OAwBpBpD,IAAWuB,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,+BAA6B1B,EAAO,WAGnD,C","sources":["components/RedditThreads.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './RedditThreads.css'; // Import the CSS file\r\n\r\nconst clientId = '9mxvBGQC4eEXhU_MskU7BA'; // Your API key (client ID)\r\nconst clientSecret = 'GE0cQIbh15OqTvE4xuCy174PRGaq1A'; // Your client secret\r\n\r\n// Function to get an access token from Reddit\r\nconst getAccessToken = async () => {\r\n  const credentials = btoa(`${clientId}:${clientSecret}`);\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'https://www.reddit.com/api/v1/access_token',\r\n      'grant_type=client_credentials',\r\n      {\r\n        headers: {\r\n          Authorization: `Basic ${credentials}`,\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      }\r\n    );\r\n    return response.data.access_token;\r\n  } catch (error) {\r\n    console.error('Error fetching access token:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst RedditThreads = ({ ticker }) => {\r\n  const [threads, setThreads] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [sortMethod, setSortMethod] = useState('hot'); // Default to 'hot'\r\n\r\n  useEffect(() => {\r\n    const fetchRedditThreads = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const accessToken = await getAccessToken();\r\n\r\n      if (!accessToken) {\r\n        setError('Failed to get access token.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(\r\n          `https://oauth.reddit.com/r/stocks/search.json?q=${ticker}&sort=${sortMethod}&limit=5`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n              'User-Agent': 'MyRedditApp/0.1',\r\n            },\r\n          }\r\n        );\r\n\r\n        setThreads(response.data.data.children);\r\n      } catch (error) {\r\n        setError('Error fetching Reddit threads.');\r\n        console.error('Error fetching Reddit threads:', error);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    if (ticker) {\r\n      fetchRedditThreads();\r\n    }\r\n  }, [ticker, sortMethod]);\r\n\r\n  return (\r\n    <div className=\"reddit-threads-container\">\r\n      <h3>\r\n        <select\r\n          value={sortMethod}\r\n          onChange={(e) => setSortMethod(e.target.value)}\r\n          className=\"reddit-sort-dropdown\" // Added class for styling\r\n        >\r\n          <option value=\"hot\">Hot</option>\r\n          <option value=\"top\">Most Upvoted</option>\r\n          <option value=\"new\">Most Recent</option>\r\n        </select>\r\n        &nbsp; {/* Added non-breaking space here */}\r\n        Reddit Threads Related to ${ticker}\r\n      </h3>\r\n\r\n      {loading && <p>Loading threads...</p>}\r\n      {error && <p>{error}</p>}\r\n      <ul>\r\n        {threads.length > 0 ? (\r\n          threads.map((thread) => (\r\n            <a\r\n              href={`https://reddit.com${thread.data.permalink}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              key={thread.data.id}\r\n              style={{ textDecoration: 'none', color: 'inherit' }} // Remove underline and inherit color\r\n            >\r\n              <li\r\n                style={{\r\n                  cursor: 'pointer',\r\n                  padding: '10px',\r\n                  marginBottom: '10px',\r\n                  border: '1px solid #ddd',\r\n                  borderRadius: '5px',\r\n                  backgroundColor: '#f9f9f9',\r\n                  transition: 'background-color 0.3s',\r\n                }}\r\n                onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = '#f0f0f0')}\r\n                onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = '#f9f9f9')}\r\n              >\r\n                <strong>{thread.data.title}</strong>\r\n                <p>\r\n                  Upvotes: {thread.data.ups} | Comments: {thread.data.num_comments}\r\n                </p>\r\n              </li>\r\n            </a>\r\n          ))\r\n        ) : (\r\n          !loading && <p>No Reddit threads found for {ticker}.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RedditThreads;\r\n"],"names":["_ref","ticker","threads","setThreads","useState","loading","setLoading","error","setError","sortMethod","setSortMethod","useEffect","fetchRedditThreads","async","accessToken","credentials","btoa","axios","post","headers","Authorization","data","access_token","console","getAccessToken","response","get","children","_jsxs","className","value","onChange","e","target","_jsx","length","map","thread","href","permalink","rel","style","textDecoration","color","cursor","padding","marginBottom","border","borderRadius","backgroundColor","transition","onMouseEnter","currentTarget","onMouseLeave","title","ups","num_comments","id"],"sourceRoot":""}